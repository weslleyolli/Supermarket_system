#!/usr/bin/env python3
"""
Script para gerar migra√ß√£o do sistema de estoque
"""

import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine

from app.core.config import settings
from app.infrastructure.database.models import Base


def create_migration():
    """Criar migra√ß√£o para o sistema de estoque"""
    print("üîÑ Criando migra√ß√£o para sistema de estoque...")

    try:
        # Conectar ao banco
        engine = create_engine(settings.DATABASE_URL)

        # Criar todas as tabelas (se n√£o existirem)
        Base.metadata.create_all(bind=engine)

        print("‚úÖ Migra√ß√£o criada com sucesso!")
        print("\nüìã Novas tabelas criadas:")
        print("  ‚Ä¢ suppliers - Fornecedores")
        print("  ‚Ä¢ stock_movements - Movimenta√ß√µes de estoque")
        print("  ‚Ä¢ purchase_orders - Pedidos de compra")
        print("  ‚Ä¢ purchase_order_items - Itens dos pedidos")
        print("\nüìù Colunas adicionadas √† tabela products:")
        print("  ‚Ä¢ supplier_id - ID do fornecedor")
        print("  ‚Ä¢ profit_margin - Margem de lucro")
        print("  ‚Ä¢ weight - Peso do produto")
        print("  ‚Ä¢ dimensions - Dimens√µes")
        print("  ‚Ä¢ location - Localiza√ß√£o no estoque")
        print("  ‚Ä¢ reorder_point - Ponto de reposi√ß√£o")
        print("  ‚Ä¢ max_stock - Estoque m√°ximo")
        print("  ‚Ä¢ last_purchase_date - √öltima compra")
        print("  ‚Ä¢ last_sale_date - √öltima venda")

    except Exception as e:
        print(f"‚ùå Erro ao criar migra√ß√£o: {str(e)}")
        return False

    return True


if __name__ == "__main__":
    success = create_migration()
    if not success:
        sys.exit(1)
